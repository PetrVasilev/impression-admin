{"version":3,"sources":["serviceWorker.js","layout/header/index.js","layout/index.js","apollo.js","pages/login/index.js","pages/main/index.js","pages/confirm/index.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","moderator","className","to","src","alt","login","onClick","localStorage","clear","open","prefix","name","GET_MODERATOR","gql","Layout","children","history","props","useQuery","onError","replace","data","loading","withLayout","Component","host","GraphQL","client","ApolloClient","uri","request","operation","token","getItem","setContext","headers","authorization","LOGIN_MUTATION","Login","useMutation","onCompleted","setItem","loginModerator","error","useState","setLogin","password","setPassword","onSubmit","e","preventDefault","variables","Group","label","Input","value","onChange","target","placeholder","required","type","feedback","invalid","Footer","color","GET_CONFIRMS","Main","confirms","ColHeader","length","Body","map","item","Row","key","id","Col","user","phone","status","getStatusNode","moment","createdAt","format","GET_CONFIRM","UPDATE_CONFIRM","Confirm","params","visible","alert","setAlert","visibleReject","setVisibleReject","comment","setComment","confirmUser","confirming","rejectUser","rejecting","confirm","image","handleConfirm","a","message","console","handleReject","cardTitle","rounded","objectURL","details","title","content","document","isDismissible","prev","locale","ReactDOM","render","apolloClient","path","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.362577fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './style.scss'\n\nimport React from 'react'\nimport { Site, Icon } from 'tabler-react'\nimport { Link } from 'react-router-dom'\n\nconst Header = ({ moderator = {} }) => {\n    const handleLogout = () => {\n        localStorage.clear()\n        window.open('/login', '_self')\n    }\n\n    return (\n        <Site.Header>\n            <div className=\"header-container\">\n                <Link to=\"/\">\n                    <img src={'/logo-vertical.png'} alt=\"inVoyager\" className=\"logo hovering\" />\n                </Link>\n                <div className=\"right\">\n                    <div className=\"name\">{moderator.login}</div>\n                    <div onClick={handleLogout} className=\"logout hovering\">\n                        <Icon prefix=\"fe\" name=\"log-out\" />\n                    </div>\n                </div>\n            </div>\n        </Site.Header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport { Container, Loader } from 'tabler-react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Header from './header'\n\nexport const GET_MODERATOR = gql`\n    {\n        moderator {\n            id\n            login\n        }\n    }\n`\n\nconst Layout = ({ children, history, ...props }) => {\n    const { data, loading } = useQuery(GET_MODERATOR, {\n        onError: () => {\n            history.replace('/login')\n        }\n    })\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <Loader />\n            </div>\n        )\n    }\n    const moderator = data ? data.moderator : {}\n    return (\n        <>\n            <Header moderator={moderator} {...props} />\n            <Container className=\"content\">{children}</Container>\n        </>\n    )\n}\n\nconst withLayout = (props, Component) => {\n    return (\n        <Layout {...props}>\n            <Component {...props} />\n        </Layout>\n    )\n}\n\nexport default withLayout\n","import ApolloClient from 'apollo-boost'\n\nexport const host = 'http://185.125.218.12:1119'\n\nconst GraphQL = `${host}/graphql`\n\nconst client = new ApolloClient({\n    uri: GraphQL,\n    request: operation => {\n        const token = localStorage.getItem('token')\n        operation.setContext({\n            headers: {\n                authorization: token ? token : ''\n            }\n        })\n    }\n})\n\nexport default client\n","import './style.scss'\n\nimport React, { useState } from 'react'\nimport { Card, Form, Button } from 'tabler-react'\nimport gql from 'graphql-tag'\nimport { useMutation } from '@apollo/react-hooks'\n\nconst LOGIN_MUTATION = gql`\n    mutation login($login: String!, $password: String!) {\n        login(login: $login, password: $password) {\n            token\n        }\n    }\n`\n\nconst Login = ({ history }) => {\n    const [loginModerator, { loading, error }] = useMutation(LOGIN_MUTATION, {\n        onCompleted: ({ login: { token } }) => {\n            localStorage.setItem('token', token)\n            history.replace('/')\n        }\n    })\n    const [login, setLogin] = useState('')\n    const [password, setPassword] = useState('')\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        loginModerator({ variables: { login, password } })\n    }\n\n    return (\n        <div className=\"login-page\">\n            <img className=\"logo\" src=\"/logo.png\" alt=\"inVoyager\" />\n            <Card>\n                <div className=\"card-title\">Войти в панель модератора</div>\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group label=\"Логин\">\n                        <Form.Input\n                            value={login}\n                            onChange={e => setLogin(e.target.value)}\n                            name=\"login\"\n                            placeholder=\"Введите логин...\"\n                            required\n                        />\n                    </Form.Group>\n                    <Form.Group label=\"Пароль\">\n                        <Form.Input\n                            value={password}\n                            onChange={e => setPassword(e.target.value)}\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"Введите пароль...\"\n                            required\n                            feedback={error ? 'Неправильный пароль' : null}\n                            invalid={error ? true : false}\n                        />\n                    </Form.Group>\n                    <Form.Footer>\n                        <Button\n                            loading={loading}\n                            type=\"submit\"\n                            className=\"login-button\"\n                            color=\"primary\"\n                        >\n                            Войти\n                        </Button>\n                    </Form.Footer>\n                </Form>\n            </Card>\n        </div>\n    )\n}\n\nexport default Login\n","import './style.scss'\n\nimport React from 'react'\nimport gql from 'graphql-tag'\nimport moment from 'moment'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Card, Table, Loader, Badge } from 'tabler-react'\nimport { Link } from 'react-router-dom'\n\nconst GET_CONFIRMS = gql`\n    {\n        confirms {\n            id\n            user {\n                id\n                name\n                phone\n                image\n            }\n            status\n            comment\n            createdAt\n            document\n        }\n    }\n`\n\nconst getStatusNode = status => {\n    switch (status) {\n        case 'confirmed':\n            return <Badge color=\"success\">Подтвержден</Badge>\n        case 'rejected':\n            return <Badge color=\"danger\">Отклонен</Badge>\n        default:\n            return <Badge color=\"warning\">Не подтвержден</Badge>\n    }\n}\n\nconst Main = () => {\n    const { loading, data } = useQuery(GET_CONFIRMS)\n\n    const confirms = data ? data.confirms : []\n\n    return (\n        <Card className=\"table-card\">\n            <Table>\n                <Table.Header>\n                    <tr>\n                        <Table.ColHeader>Имя</Table.ColHeader>\n                        <Table.ColHeader>Номер телефона</Table.ColHeader>\n                        <Table.ColHeader>Статус</Table.ColHeader>\n                        <Table.ColHeader>Создан</Table.ColHeader>\n                    </tr>\n                </Table.Header>\n                {confirms.length > 0 && (\n                    <Table.Body>\n                        {confirms.map(item => (\n                            <Table.Row key={item.id}>\n                                <Table.Col>\n                                    <Link to={`/confirm/${item.id}`}>{item.user.name}</Link>\n                                </Table.Col>\n                                <Table.Col>+{item.user.phone}</Table.Col>\n                                <Table.Col>{getStatusNode(item.status)}</Table.Col>\n                                <Table.Col>\n                                    {moment(item.createdAt).format('DD.MM.YYYY HH:mm')}\n                                </Table.Col>\n                            </Table.Row>\n                        ))}\n                    </Table.Body>\n                )}\n            </Table>\n            {loading && (\n                <div className=\"table-loading\">\n                    <Loader className=\"table-loader\" />\n                </div>\n            )}\n        </Card>\n    )\n}\n\nexport default Main\n","import './style.scss'\n\nimport React, { useState } from 'react'\nimport gql from 'graphql-tag'\nimport moment from 'moment'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport { Loader, Card, ContactCard, Badge, Button, Alert, Form } from 'tabler-react'\n\nimport { host } from '../../apollo'\n\nconst GET_CONFIRM = gql`\n    query confirm($id: ID!) {\n        confirm(where: { id: $id }) {\n            id\n            user {\n                id\n                name\n                phone\n                image\n            }\n            status\n            comment\n            createdAt\n            document\n        }\n    }\n`\n\nconst UPDATE_CONFIRM = gql`\n    mutation updateConfirm($id: ID!, $status: String!, $comment: String) {\n        updateConfirm(where: { id: $id }, data: { status: $status, comment: $comment }) {\n            id\n            user {\n                id\n                name\n                phone\n                image\n            }\n            status\n            comment\n            createdAt\n            document\n        }\n    }\n`\n\nconst getStatusNode = status => {\n    switch (status) {\n        case 'confirmed':\n            return <Badge color=\"success\">Подтвержден</Badge>\n        case 'rejected':\n            return <Badge color=\"danger\">Отклонен</Badge>\n        default:\n            return <Badge color=\"warning\">Не подтвержден</Badge>\n    }\n}\n\nconst Confirm = ({ match }) => {\n    const { id } = match.params\n    const { loading, data } = useQuery(GET_CONFIRM, {\n        variables: { id }\n    })\n    const [alert, setAlert] = useState({\n        visible: false\n    })\n    const [visibleReject, setVisibleReject] = useState(false)\n    const [comment, setComment] = useState('')\n    const [confirmUser, { loading: confirming }] = useMutation(UPDATE_CONFIRM)\n    const [rejectUser, { loading: rejecting }] = useMutation(UPDATE_CONFIRM)\n\n    const confirm = data ? data.confirm : {}\n\n    const user = confirm.user ? confirm.user : {}\n\n    const image = user.image ? `${host}/images/${user.image}` : '/default-user.jpg'\n\n    const handleConfirm = async () => {\n        try {\n            setAlert({ visible: false })\n            await confirmUser({ variables: { id, status: 'confirmed', comment: '' } })\n            setAlert({\n                visible: true,\n                type: 'success',\n                message: 'Пользователь успешно подтвержден'\n            })\n        } catch (err) {\n            console.error(err)\n            setAlert({\n                visible: true,\n                type: 'danger',\n                message: 'Не удалось подтвердить пользователя'\n            })\n        }\n    }\n\n    const handleReject = async e => {\n        e.preventDefault()\n        try {\n            setAlert({ visible: false })\n            await rejectUser({ variables: { id, status: 'rejected', comment } })\n            setAlert({\n                visible: true,\n                type: 'success',\n                message: 'Пользователь успешно отклонен'\n            })\n            setVisibleReject(false)\n        } catch (err) {\n            console.error(err)\n            setAlert({\n                visible: true,\n                type: 'danger',\n                message: 'Не удалось отклонить пользователя'\n            })\n        }\n    }\n\n    return (\n        <Card className=\"confirm-card\">\n            {loading ? (\n                <div className=\"confirm-loading\">\n                    <Loader className=\"confirm-loader\" />\n                </div>\n            ) : (\n                <>\n                    <ContactCard\n                        cardTitle=\"Пользователь\"\n                        rounded\n                        objectURL={image}\n                        alt={image}\n                        details={[\n                            { title: 'Имя', content: user.name },\n                            { title: 'Номер телефона', content: '+' + user.phone },\n                            { title: 'Статус', content: getStatusNode(confirm.status) },\n                            {\n                                title: 'Комментарий к статусу',\n                                content: confirm.comment ? confirm.comment : '-'\n                            },\n                            {\n                                title: 'Документ',\n                                content: (\n                                    <img\n                                        className=\"document-image\"\n                                        src={`${host}/images/${confirm.document}`}\n                                        alt={confirm.document}\n                                    />\n                                )\n                            },\n                            {\n                                title: 'Дата запроса',\n                                content: moment(confirm.createdAt).format('DD.MM.YYYY HH:mm')\n                            }\n                        ]}\n                    />\n                    {alert.visible && (\n                        <Alert isDismissible type={alert.type}>\n                            {alert.message}\n                        </Alert>\n                    )}\n                    <div className=\"confirm-actions\">\n                        <Button onClick={handleConfirm} loading={confirming} color=\"success\">\n                            Подтвердить\n                        </Button>\n                        <Button onClick={() => setVisibleReject(prev => !prev)} color=\"danger\">\n                            Отклонить\n                        </Button>\n                    </div>\n                    {visibleReject && (\n                        <Form className=\"comment-form\" onSubmit={handleReject}>\n                            <Form.Group label=\"Комментарий\">\n                                <Form.Input\n                                    required\n                                    name=\"comment\"\n                                    placeholder=\"Введите комментарий...\"\n                                    value={comment}\n                                    onChange={e => setComment(e.target.value)}\n                                />\n                            </Form.Group>\n                            <Button loading={rejecting} type=\"submit\" color=\"info\">\n                                Сохранить\n                            </Button>\n                        </Form>\n                    )}\n                </>\n            )}\n        </Card>\n    )\n}\n\nexport default Confirm\n","import './styles/global.scss'\nimport 'moment/locale/ru'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport moment from 'moment'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { ApolloProvider } from '@apollo/react-hooks'\n\nimport * as serviceWorker from './serviceWorker'\nimport withLayout from './layout'\nimport apolloClient from './apollo'\nimport { Main, Confirm, Login } from './pages'\n\nmoment.locale('ru')\n\nconst App = () => {\n    return (\n        <ApolloProvider client={apolloClient}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" exact component={props => withLayout(props, Main)} />\n                    <Route\n                        path=\"/confirm/:id\"\n                        exact\n                        component={props => withLayout(props, Confirm)}\n                    />\n                    <Route path=\"/login\" exact component={Login} />\n                </Switch>\n            </BrowserRouter>\n        </ApolloProvider>\n    )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}